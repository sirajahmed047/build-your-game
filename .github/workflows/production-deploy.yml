name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  # Quality Gates
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Linting
        run: npm run lint

      - name: Unit tests
        run: npm run test:unit

      - name: Integration tests
        run: npm run test:integration

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -v '^0$'; then
            echo "High severity vulnerabilities found"
            exit 1
          fi

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 7

  # Database Migration Testing
  database-migration:
    name: Database Migration Test
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local
        run: supabase start

      - name: Run migrations
        run: supabase db push --local

      - name: Validate schema
        run: |
          # Check that all expected tables exist
          supabase db diff --local --schema public
          
          # Validate materialized views
          psql postgresql://postgres:postgres@localhost:54322/postgres -c "
            SELECT schemaname, matviewname 
            FROM pg_matviews 
            WHERE schemaname = 'public';
          "

      - name: Test database functions
        run: |
          psql postgresql://postgres:postgres@localhost:54322/postgres -c "
            SELECT perform_database_health_check();
            SELECT * FROM get_backup_health_status();
          "

      - name: Stop Supabase
        run: supabase stop

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, database-migration]
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: '.next'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - Staging"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

      - name: Run staging database migrations
        run: |
          npx supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          npx supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run smoke tests on staging
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run basic health checks
          curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1
          
          # Test critical endpoints
          npm run test:smoke -- --baseUrl=${{ secrets.STAGING_URL }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Pre-deployment health check
        run: |
          # Check current production health
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || echo "Production currently unhealthy"

      - name: Deploy database migrations (Production)
        run: |
          npx supabase link --project-ref ${{ secrets.SUPABASE_PRODUCTION_PROJECT_REF }}
          
          # Run migrations with backup
          echo "Creating pre-migration backup point..."
          npx supabase db dump --data-only > pre-migration-backup.sql
          
          # Apply migrations
          npx supabase db push
          
          # Verify migration success
          npx supabase db diff
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: '.next'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Production Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Post-deployment validation
        run: |
          # Wait for deployment to propagate
          sleep 60
          
          # Comprehensive health checks
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
          
          # Test critical user flows
          npm run test:production -- --baseUrl=${{ secrets.PRODUCTION_URL }}
          
          # Verify database health
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health/database || exit 1

      - name: Performance monitoring setup
        run: |
          # Trigger performance baseline collection
          curl -X POST ${{ secrets.PRODUCTION_URL }}/api/monitoring/baseline \
            -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful"
          echo "üöÄ Version: ${{ github.sha }}"
          echo "üîó URL: ${{ secrets.PRODUCTION_URL }}"

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    steps:
      - name: Checkout previous version
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build previous version
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy rollback to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: '.next'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Rollback Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Notify rollback
        run: |
          echo "üîÑ Rollback completed"
          echo "üìù Rolled back to: ${{ github.event.before }}"

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.PRODUCTION_URL }}
            ${{ secrets.PRODUCTION_URL }}/dashboard
            ${{ secrets.PRODUCTION_URL }}/story
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Database performance check
        run: |
          # Check query performance
          curl -f ${{ secrets.PRODUCTION_URL }}/api/monitoring/performance || exit 1
          
          # Verify materialized view refresh
          curl -f ${{ secrets.PRODUCTION_URL }}/api/monitoring/materialized-views || exit 1

# Workflow notifications
notifications:
  name: Notifications
  runs-on: ubuntu-latest
  needs: [deploy-production, performance-monitoring]
  if: always()
  steps:
    - name: Deployment notification
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "‚úÖ Production deployment successful"
        else
          echo "‚ùå Production deployment failed"
        fi